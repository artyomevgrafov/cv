#HOMEWORK 9
#In this homework, you are going to use the dlib face detector and apply it to an image of your liking. You can follow the procedure shown in lesson 9. Please always comment your code so I can see what you're doing :-)

#For this homework we are not going to provide you with any code, you'll have to build the face detector on your own.

#Step 0
#Run the necessary imports.
import cv2
import numpy as np
import urllib.request
from matplotlib import pyplot as plt
plt.rcParams['figure.figsize'] = [15, 10]

# Step 1 Load an image (any image that contains faces).
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')


# Load an image (you can freely chose any image you like)
req = urllib.request.urlopen('https://i.ibb.co/GsGMGPV/depositphotos-52455563-stock-photo-digital-devices-with-peoples-faces.webp')

arr = np.asarray(bytearray(req.read()), dtype=np.uint8)
img = cv2.imdecode(arr, -1) # 'Load it as it is'

#img = cv2.imread('C:\\server\\depositphotos_52455563-stock-photo-digital-devices-with-peoples-faces.jpg')
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
plt.imshow(img)

# minNeighbors = 0 shows all the detection at all scale, a value of approx. 5 shall felter out all the spurious detections
faces = face_cascade.detectMultiScale(gray, 1.3, 1)
print(faces)

print('Number of detected faces:', len(faces))


# Draw rectangle around each face
result = np.copy(img)
faces_img = []

colorList=[(0,255,0),(255,0,0),(0,0,155),(0,0,55)] # etc ...
i=0
for (x,y,w,h) in faces:
  cv2.rectangle(result, (x, y), (x+w, y+h), colorList[i], 2)
  i=i+1
print(colorList[0])
print(colorList[1])
print(colorList[2])
print(colorList[3])

    
# for (x, y, w, h) in faces: 
    # Draw rectangle around the face
    # cv2.rectangle(result, (x, y), (x+w, y+h), (0, 255, 0), 3)
faces_img.append(result[y:y+h, x:x+w, :])
    
plt.imshow(result)
