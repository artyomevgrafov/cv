import cv2
import math
import numpy as np
from matplotlib import pyplot as plt
plt.rcParams['figure.figsize'] = [15, 10]
# Let's read the image
img = cv2.imread('C:\\server\\data\\htdocs\\document.jpg')
# Convert it to gray scale
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
gray = np.float32(gray)/255
rows, cols = gray.shape

# Let's plot the images (colour and gray scale)
plt.subplot(121), plt.imshow(img)
plt.subplot(122), plt.imshow(gray, cmap='gray')
# Compute Harris corners (use the available OpenCV functions)
# Suggested parameters:
#            block size of 2 pixels
#            gradient kernel size of 3 pixels
#            k parameter equal to 0.04
cornerness = cv2.cornerHarris(gray,2,3,0.04)

# We are not interested in edges, so put to zero all negative cornerness values
cornerness = np.maximum(cornerness, 0)
#cornerness = cornerness>0
#cornerness = cv2.dilate(cornerness,None)
#print(cornerness)

#for element in cornerness:
#        if (element.any() < 0):
#            print(element)

# Since cornerness has a huge dynamic range, let's take the logarithm for better visualization and manipulation
cornerness = np.log(cornerness + 1e-6)
# Let's now plot the image and the corresponding Harris corners (in log scale)
plt.subplot(121), plt.imshow(img)
plt.subplot(122), plt.imshow(cornerness)
# Detection thresholds - Пороги обнаружения
th_top_left, th_top_right = -1e6, -1e6
th_bottom_left, th_bottom_right = -1e6, -1e6

# Corner coordinates-угловые координаты
opt_top_left, opt_top_right = None, None
opt_bottom_left, opt_bottom_right = None, None
# Size of each quadrant (in pixels) - Размер каждого квадранта (в пикселях)
quad_size = 7

# Let's now scan the Harris detection results - Теперь давайте просканируем результаты обнаружения Харриса.
for r in range(quad_size, rows-quad_size):# для рядков в диапозоне (7,396)
    # print(rows-quad_size)
    # print(r)
    for c in range(quad_size, cols-quad_size): # для колонок в диапозоне (7,295)
        # print(cols-quad_size)
        # Edges with too small cornerness score are discarded, -7 seems like a good value
        # Ребра со слишком маленьким показателем угловатости отбрасываются, -7 кажется хорошим значением
        # print(cornerness)
        if cornerness[r, c] < -7:
            continue
        # print(cornerness)
        # Extract block consisting of 4 quadrants - Блок извлечения, состоящий из 4 квадрантов
        block = 255*gray[r-quad_size:r+quad_size+1, c-quad_size:c+quad_size+1]
        #              396-7      :396+7        +1,295-7     :295+7        +1
        # print(block)
        # print(gray)
        # Extract the four quandrants - Извлеките четыре квадранта
        quad_top_left = block[0:quad_size, 0:quad_size]
        # print(quad_top_left)
        quad_top_left = block[0:quad_size, 0:quad_size]
        quad_top_right = block[0:quad_size,quad_size:quad_size*2+1]
        quad_bottom_left = block[quad_size:quad_size*2+1,0:quad_size]
        quad_bottom_right = block[quad_size:quad_size*2+1,quad_size:quad_size*2+1]


        
        # Top-left corner
        # For the top-left document corner, the bottom-right quadrant is mostly paper and the rest is
        # darker background. Therefore, I suggest the descriptor to be the average difference between
        # the paper quandrant and the sum of the 3 remaining bakcground quandrants
        descriptor = np.mean(quad_bottom_right) - \
                     np.mean(quad_top_left) - np.mean(quad_top_right) - np.mean(quad_bottom_left)
        # Let's detect the best descriptor - Визначимо найкращий дескриптор
        if descriptor > th_top_left:
            # We update the threshold
            th_top_left = descriptor
            # And we update the optimal location
            opt_top_left = (c, r)
            
        # Top-right corner
        descriptor = np.mean(quad_bottom_left) - \ (np.mean(quad_bottom_right) +
        np.mean(quad_top_right) + np.mean(quad_top_left)) if descriptor > th_top_right:
                th_top_right = descriptor
                opt_top_right = (c, r)
            # Bottom-left corner
        descriptor = np.mean(quad_top_right) - \ (np.mean(quad_bottom_right) +
        np.mean(quad_top_left) + np.mean(quad_top_left)) if descriptor > th_bottom_left: th_bottom_left = descriptor
                opt_bottom_left = (c, r)
            # Bottom-right corner
        descriptor = np.mean(quad_top_left) - \ (np.mean(quad_bottom_right) +
        np.mean(quad_top_right) + np.mean(quad_bottom_left)) if descriptor > th_bottom_right:
                th_bottom_right = descriptor
                opt_bottom_right = (c, r)
# Let's draw circles at the detected corners
out = cv2.circle(img_copy, opt_top_left, 3, (255,0,0), -1)
out = cv2.circle(img_copy, opt_top_right, 3, (255,0,0), -1) 
out = cv2.circle(img_copy, opt_bottom_left, 3, (255,0,0), -1) 
out = cv2.circle(img_copy, opt_bottom_right, 3, (255,0,0), -1)

# And finally we plot the images (with the detected document corners)
plt.subplot(121), plt.imshow(out)
plt.subplot(122), plt.imshow(cornerness)
