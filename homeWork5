import cv2
import math
import numpy as np
from matplotlib import pyplot as plt
plt.rcParams['figure.figsize'] = [15, 10]
# Load image
img = cv2.imread('C:\\server\\data\\htdocs\\kodim23.png')
# Convert it to RGB
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
# Plot it
plt.imshow(img)
# Black, dark gray, light gray, white
colors = np.array([[0, 0, 0],
                   [64, 64, 64],
                   [192, 192, 192],
                   [255, 255, 255]])
import math
# Cast the image to float
#img = img.astype(float)/255
#img = np.float32
img = img.astype(np.float32)

# Prepare for quantization
rows, cols, channels = img.shape
quantized = np.zeros_like(img)

def find_closest_colour_from_pallette(pixel,colors):
    colors = np.array(colors)
    color = np.array(pixel)
    distances = np.sqrt(np.sum((colors-color)**2,axis=1))
    index_of_smallest = np.where(distances==np.amin(distances))
    smallest_distance = colors[index_of_smallest]
    return smallest_distance 

# Apply quantization
for r in range(rows):
    for c in range(cols):
        # Extract the original pixel value
        #pixel = list(img[r, c, :])
        pixel = img[r, c]
        # print(pixel)
        # Find the closest colour from the pallette (using absolute value/Euclidean distance)
        # Note: You may need more than one line of code here
        new_pixel = find_closest_colour_from_pallette(pixel,colors)[0]
        #new_pixel = np.squeeze(new_pixel)
        #new_pixel = list((np.array(new_pixel)).reshape(3,))
        #print(new_pixel )
        
        
        # Apply quantization
        quantized[r, c, :] = new_pixel

# Show quantized image (don't forget to cast back to uint8)
quantized = (255*quantized).astype(np.uint8)
plt.imshow(quantized)

# Compute average quantization error
avg_quant_error = np. mean ( (img - quantized) **2)
print(avg_quant_error)

# Make a temporal copy of the original image, we will need it for error diffusion
img_tmp = np.copy(img)
dithering = np.zeros_like(img)

def find_closest_colour_from_pallette(pixel,colors):
    colors = np.array(colors)
    color = np.array(pixel)
    distances = np.sqrt(np.sum((colors-color)**2,axis=1))
    index_of_smallest = np.where(distances==np.amin(distances))
    smallest_distance = colors[index_of_smallest]
    return smallest_distance

def quant_error_Fun(ref, target):
    error = ref.astype(np.float32) - target.astype(np.float32)
    mse = np.mean(error**2)
    return 10 * np.log10((255**2)/mse)

for r in range(1, rows-1):
    for c in range(1, cols-1):
        # Extract the original pixel value
        pixel = img_tmp[r] [c]
        #print(pixel)
# Find the closest colour from the pallette (using absolute value/Euclidean distance)
# Note: You may need more than one line of code here
        new_pixel = find_closest_colour_from_pallette(pixel,colors)[0]
        #print(new_pixel)
# Compute quantization error
quant_error = pixel-new_pixel
quant_error = quant_error_Fun(pixel, new_pixel)
print(quant_error)

# Diffuse the quantization error accroding to the FS diffusion matrix
# Note: You may need more than one line of code here
img_tmp[r] [c] = new_pixel
    
img_tmp[r + 1] [c    ] = img_tmp [r + 1] [c    ] + quant_error * 7 / 16
img_tmp[r - 1] [c + 1] = img_tmp [r - 1] [c + 1] + quant_error * 3 / 16
img_tmp[r    ] [c + 1] = img_tmp [r    ] [c + 1] + quant_error * 5 / 16
img_tmp[r + 1] [c + 1] = img_tmp [r + 1] [c + 1] + quant_error * 1 / 16

 # Apply dithering
dithering[r, c, :] = new_pixel
# Show quantized image (don't forget to cast back to uint8)
img_tmp = (255*img_tmp).astype(np.uint8)
dithering = (255*dithering).astype(np.uint8)
plt.subplot(121), plt.imshow(img_tmp)   # optimally quantized
plt.subplot(122), plt.imshow(dithering)   # dithering

# Compute average quantization error for dithered image
avg_dith_error = 
